# Definir los colores para las cuadrículas
grid.col <- c(
"#AA3939",
rep("#AA6C39", 4),
rep("#2D882D", 3),
rep("#226666", 3)
)
# Crear el diagrama de cuerdas
chordDiagram(
FIFAm,
directional = TRUE,
grid.col = grid.col,
order = c(
"GK1", "DF2", "DF3", "DF4", "DF5",
"MF6", "MF8", "MF10",
"FW7", "FW9", "FW11"
)
)
# Convertir el conjunto de datos FIFA_Nether en una matriz de sociomatrices
FIFAm <- as.sociomatrix(FIFA_Nether, attrname = 'passes')
# Definir los nombres de las columnas de la matriz
colnames(FIFAm) <- c(
"GK1", "DF3", "DF4", "DF5", "MF6",
"FW7", "FW9", "MF10", "FW11", "DF2", "MF8"
)
# Definir los nombres de las filas de la matriz
rownames(FIFAm) <- c(
"GK1", "DF3", "DF4", "DF5", "MF6",
"FW7", "FW9", "MF10", "FW11", "DF2", "MF8"
)
# Paleta de colores
palf <- colorRampPalette(c("#669999", "#003333"))
# Crear el heatmap
heatmap(
FIFAm[, 11:1],
Rowv = NA,
Colv = NA,
col = palf(60),
scale = "none",
margins = c(11, 11)
)
edgeMaker <- function(whichRow, len = 100, curved = TRUE) {
# Obtener las coordenadas de los nodos de origen y destino
fromC <- layoutCoordinates[adjacencyList[whichRow, 1],]
toC <- layoutCoordinates[adjacencyList[whichRow, 2],]
graphCenter <- colMeans(layoutCoordinates)
bezierMid <- c(fromC[1], toC[2])
distance1 <- sum((graphCenter - bezierMid)^2)
if (distance1 < sum((graphCenter - c(toC[1], fromC[2]))^2)) {
bezierMid <- c(toC[1], fromC[2])
}
bezierMid <- (fromC + toC + bezierMid) / 3
if (curved == FALSE) {
bezierMid <- (fromC + toC) / 2
}
edge <- data.frame(
bezier(c(fromC[1], bezierMid[1], toC[1]),
c(fromC[2], bezierMid[2], toC[2]),
evaluation = len)
)
edge$Sequence <- 1:len
edge$Group <- paste(adjacencyList[whichRow, 1:2], collapse = ">")
return(edge)
}
fifa <- FIFA_Nether
fifa.edge <- as.edgelist.sna(fifa, attrname = 'passes')
fifa.edge <- data.frame(fifa.edge)
names(fifa.edge)[3] <- "value"
fifa.edge <- fifa.edge[fifa.edge$value > 9, ]
adjacencyList <- fifa.edge
layoutCoordinates <- gplot(network(fifa.edge))
allEdges <- lapply(1:nrow(fifa.edge), edgeMaker, len = 500, curved = TRUE)
allEdges <- do.call(rbind, allEdges)
# Crear un nuevo tema
new_theme_empty <- theme_bw()
new_theme_empty$line <- element_blank()
new_theme_empty$rect <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit")
zp1 <- ggplot(allEdges)
zp1 <- zp1 + geom_path(aes(x = x, y = y, group = Group, colour = Sequence, size = -Sequence))
zp1 <- zp1 + geom_point(data = data.frame(layoutCoordinates), aes(x = x, y = y), size = 4, pch = 21, colour = "black", fill = "gray")
# Añadir una escala de color a los bordes
zp1 <- zp1 + scale_colour_gradient(low = gray(0), high = gray(9/10), guide = "none")
# Añadir una escala de tamaño a los bordes
zp1 <- zp1 + scale_size(range = c(1/10, 1.5), guide = "none")
zp1 <- zp1 + new_theme_empty
print(zp1)
C1 <- c(1,1,1,0,0,0)
C2 <- c(0,1,1,1,0,0)
C3 <- c(0,0,1,1,1,0)
C4 <- c(0,0,0,0,1,1)
aff.df <- data.frame(C1,C2,C3,C4)
row.names(aff.df) <- c("S1","S2","S3","S4","S5","S6")
bn <- graph.incidence(aff.df)
plt.x <- c(rep(2,6),rep(4,4))
plt.y <- c(7:2,6:3)
lay <- as.matrix(cbind(plt.x,plt.y))
shapes <- c("circle","square")
colors <- c("blue","red")
plot(bn,vertex.color=colors[V(bn)$type+1],
vertex.shape=shapes[V(bn)$type+1],
vertex.size=10,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=0.9,
layout=lay)
bn <- graph.incidence(aff.df)
bn
get.incidence(bn)
V(bn)$type
V(bn)$name
el.df <- data.frame(rbind(c("S1","C1"),
c("S2","C1"),
c("S2","C2"),
c("S3","C1"),
c("S3","C2"),
c("S3","C3"),
c("S4","C2"),
c("S4","C3"),
c("S5","C3"),
c("S5","C4"),
c("S6","C4")))
el.df
bn2 <- graph.data.frame(el.df,directed=FALSE)
bn2
V(bn2)$type <- V(bn2)$name %in% el.df[,1]
bn2
graph.density(bn)==graph.density(bn2)
shapes <- c("circle","square")
colors <- c("blue","red")
plot(bn,vertex.color=colors[V(bn)$type+1],
vertex.shape=shapes[V(bn)$type+1],
vertex.size=10,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=0.9)
bn.pr <- bipartite.projection(bn)
bn.pr
graph.density(bn.pr$proj1)
bn.student <- bn.pr$proj1
bn.class <- bn.pr$proj2
graph.density(bn.student)
get.adjacency(bn.student,sparse=FALSE,attr="weight")
get.adjacency(bn.class,sparse=FALSE,attr="weight")
shapes <- c("circle","square")
colors <- c("blue","red")
op <- par(mfrow=c(1,2))
plot(bn.student,vertex.color="blue",
vertex.shape="circle",main="Students",
edge.width=E(bn.student)$weight*2,
vertex.size=15,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=1)
plot(bn.class,vertex.color="red",
vertex.shape="square",main="Classes",
edge.width=E(bn.student)$weight*2,
vertex.size=15,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=1)
par(op)
load('C:/Users/bcriv/OneDrive/Documentos/redes_sociales/Redes_sociales_r/input/hwd.rda')
h1 <- hwd
h1
V(h1)$name[1:10]
V(h1)$type[1:10]
V(h1)$IMDBrating[1:10]
V(h1)$name[155:165]
V(h1)$shape <- ifelse(V(h1)$type==TRUE,
"square","circle")
V(h1)$shape[1:10]
V(h1)$color <- ifelse(V(h1)$type==TRUE,
"red","lightblue")
h2 <- subgraph.edges(h1, E(h1)[inc(V(h1)[name %in% c("The Wolf of Wall Street", "Gangs of New York", "The Departed")])])
plot(h2, layout = layout_with_kk)
graph.density(h1)
table(igraph::degree(h1,v=V(h1)[type == FALSE]))
mean(igraph::degree(h1,v=V(h1)[type == FALSE]))
V(h1)$deg <- igraph::degree(h1)
V(h1)[type==FALSE & deg > 4]$name
busy_actor <- data.frame(cbind(
Actor = V(h1)[type==FALSE & deg > 4]$name,
Movies = V(h1)[type==FALSE & deg > 4]$deg
))
busy_actor[order(busy_actor$Movies,decreasing=TRUE),]
for (i in 161:1365) {
V(h1)[i]$totrating <- sum(V(h1)[.nei(i)]$IMDBrating)
}
max(V(h1)$totrating,na.rm=TRUE)
pop_actor <- data.frame(cbind(
Actor = V(h1)[type==FALSE & totrating > 40]$name,
Popularity = V(h1)[type==FALSE &
totrating > 40]$totrating))
pop_actor[order(pop_actor$Popularity,decreasing=TRUE),]
for (i in 161:1365) {
V(h1)[i]$avgrating <- mean(V(h1)[.nei(i)]$IMDBrating)
}
num <- V(h1)[type==FALSE]$deg
avgpop <- V(h1)[type==FALSE]$avgrating
summary(lm(avgpop ~ num))
scatter.smooth(num,avgpop,col="lightblue",
ylim=c(2,10),span=.8,
xlab="Number of Movies",
ylab="Avg. Popularity")
h1.pr <- bipartite.projection(h1)
h1.act <- h1.pr$proj1
h1.mov <- h1.pr$proj2
h1.act
h1.mov
op <- par(mar = rep(0, 4))
plot(h1.mov,vertex.color="red",
vertex.shape="circle",
vertex.size=(V(h1.mov)$IMDBrating)-3,
vertex.label=NA)
par(op)
# densidad
graph.density(h1.mov)
# nuemro de clousters
no.clusters(h1.mov)
# tamaños de los cluster
clusters(h1.mov)$csize
# distribucion de los clusters
table(E(h1.mov)$weight)
h2.mov <- induced.subgraph(h1.mov, vids=clusters(h1.mov)$membership==1)
plot(h2.mov,vertex.color="red",
edge.width=sqrt(E(h1.mov)$weight),
vertex.shape="circle",
vertex.size=(V(h2.mov)$IMDBrating)-3,
vertex.label=NA)
table(graph.coreness(h2.mov))
h3.mov <- induced.subgraph(h2.mov,
vids=graph.coreness(h2.mov)>4)
h3.mov
plot(h3.mov,vertex.color="red",
vertex.shape="circle",
edge.width=sqrt(E(h1.mov)$weight),
vertex.label.cex=0.7,vertex.label.color="darkgreen",
vertex.label.dist=0.3,
vertex.size=(V(h3.mov)$IMDBrating)-3)
# librerias necesarias
library(intergraph)
library(igraph)
library(devtools)# descargar desde github
library(networkD3)
library(visNetwork)
library(htmlwidgets)
library(arcdiagram)
library(circlize)
library(network)
library(sna)
library(ggplot2)
library(Hmisc)
library(rnaturalearth)
# Descarga los datos de los límites de los departamentos de Colombia
colombia <- ne_states(country = "colombia", returnclass = "sf")
# Crear un data frame con nombres de departamentos y valores asociados
departamentos <- c("Amazonas", "Antioquia", "Arauca", "Atlantico", "Bolivar", "Boyaca", "Caldas", "Caqueta", "Casanare", "Cauca", "Cesar", "Choco", "Cordoba", "Cundinamarca", "Guainia", "Guaviare", "Huila", "La Guajira", "Magdalena", "Meta", "Nariño", "Norte de Santander", "Putumayo", "Quindio", "Risaralda", "San Andres y Providencia", "Santander", "Sucre", "Tolima", "Valle del Cauca", "Vaupes", "Vichada")
valores <- c(10, 15, 8, 20, 25, 12, 18, 5, 9, 13, 16, 22, 19, 11, 7, 3, 14, 6, 17, 21, 24, 27, 23, 26, 28, 30, 32, 29, 31, 35, 33, 34)
data <- data.frame(departamento = departamentos, valor = valores)
# Crear un data frame con nombres de departamentos y valores asociados
departamentos <- c("Amazonas", "Antioquia", "Arauca", "Atlantico", "Bolivar", "Boyaca", "Caldas", "Caqueta", "Casanare", "Cauca", "Cesar", "Choco", "Cordoba", "Cundinamarca", "Guainia", "Guaviare", "Huila", "La Guajira", "Magdalena", "Meta", "Nariño", "Norte de Santander", "Putumayo", "Quindio", "Risaralda", "San Andres y Providencia", "Santander", "Sucre", "Tolima", "Valle del Cauca", "Vaupes", "Vichada")
valores <- c(10, 15, 8, 20, 25, 12, 18, 5, 9, 13, 16, 22, 19, 11, 7, 3, 14, 6, 17, 21, 24, 27, 23, 26, 28, 30, 32, 29, 31, 35, 33, 34)
data <- data.frame(departamento = departamentos, valor = valores)
x1
# Crear un data frame con nombres de departamentos y valores asociados
departamentos <- c("Amazonas", "Antioquia", "Arauca", "Atlantico", "Bolivar", "Boyaca", "Caldas", "Caqueta", "Casanare", "Cauca", "Cesar", "Choco", "Cordoba", "Cundinamarca", "Guainia", "Guaviare", "Huila", "La Guajira", "Magdalena", "Meta", "Nariño", "Norte de Santander", "Putumayo", "Quindio", "Risaralda", "San Andres y Providencia", "Santander", "Sucre", "Tolima", "Valle del Cauca", "Vaupes", "Vichada")
valores <- c(10, 15, 8, 20, 25, 12, 18, 5, 9, 13, 16, 22, 19, 11, 7, 3, 14, 6, 17, 21, 24, 27, 23, 26, 28, 30, 32, 29, 31, 35, 33, 34)
data <- data.frame(departamento = departamentos, valor = valores)
library(rnaturalearth)
# Descarga los datos de los límites de los departamentos de Colombia
colombia <- ne_states(country = "colombia", returnclass = "sf")
library(dplyr)
# Asegúrate de que el nombre del departamento sea del mismo tipo en ambos conjuntos de datos
data$departamento <- tolower(data$departamento)
# Une los datos
colombia_data <- merge(colombia, data, by.x = "admin", by.y = "departamento", all.x = TRUE)
library(ggplot2)
# Grafico
ggplot() +
geom_sf(data = colombia_data, aes(fill = valor)) +
scale_fill_gradient(low = "blue", high = "red", name = "Valor asociado") +
labs(title = "Valor asociado por departamento en Colombia") +
theme_minimal()
# direccion de trabajo
# pc 1 C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica
# pc 2 C:/Users/bcriv/Desktop/Prueba_tecnica/Prueba_tecnica_ADRES
setwd('C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica')
# carga de datos
library(openxlsx)
library(readxl)
library(sqldf)
library(ggplot2)
### lectura de datos
municipios <- read.xlsx("Municipios.xlsx")
prestadores <- read.xlsx("Prestadores.xlsx")
# caracteres extraños
municipios$Departamento <- gsub("[^[:alnum:]\\s]", "", municipios$Departamento)
municipios$Municipio <- gsub("[^[:alnum:]\\s]", "", municipios$Municipio)
# minimizar y quitar tildes
prestadores$depa_nombre <- tolower(prestadores$depa_nombre)
prestadores$muni_nombre <- tolower(prestadores$muni_nombre)
municipios$Departamento <- tolower(municipios$Departamento)
municipios$Municipio <- tolower(municipios$Municipio)
# espacios en blanco
# eliminar "y providencia"
prestadores$depa_nombre <- gsub(" y providencia", "", prestadores$depa_nombre)
# cargue de los datos a SQLite
conect <- dbConnect(SQLite(), dbname = "datos.db")
dbWriteTable(conect, name = 'prestadores', value = prestadores, row.names = FALSE, overwrite = TRUE)
dbWriteTable(conect, name = 'municipios', value = municipios, row.names = FALSE, overwrite = TRUE)
View(municipios)
View(prestadores)
# direccion de trabajo
# pc 1 C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica
# pc 2 C:/Users/bcriv/Desktop/Prueba_tecnica/Prueba_tecnica_ADRES
setwd('C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica')
# carga de datos
library(openxlsx)
library(readxl)
library(sqldf)
library(ggplot2)
### lectura de datos
municipios <- read.xlsx("Municipios.xlsx")
prestadores <- read.xlsx("Prestadores.xlsx")
# caracteres extraños
municipios$Departamento <- gsub("[^[:alnum:]\\s]", "", municipios$Departamento)
municipios$Municipio <- gsub("[^[:alnum:]\\s]", "", municipios$Municipio)
# minimizar y quitar tildes
prestadores$depa_nombre <- tolower(prestadores$depa_nombre)
prestadores$muni_nombre <- tolower(prestadores$muni_nombre)
municipios$Departamento <- tolower(municipios$Departamento)
municipios$Municipio <- tolower(municipios$Municipio)
# espacios en blanco
# eliminar "y providencia"
prestadores$depa_nombre <- gsub(" y providencia", "", prestadores$depa_nombre)
View(municipios)
unique(prestadores$depa_nombre)
# direccion de trabajo
# pc 1 C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica
# pc 2 C:/Users/bcriv/Desktop/Prueba_tecnica/Prueba_tecnica_ADRES
setwd('C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica')
# carga de datos
library(openxlsx)
library(readxl)
library(sqldf)
library(ggplot2)
### lectura de datos
municipios <- read.xlsx("Municipios.xlsx")
prestadores <- read.xlsx("Prestadores.xlsx")
unique(prestadores$depa_nombre)
# caracteres extraños
municipios$Departamento <- gsub("[^[:alnum:]\\s]", "", municipios$Departamento)
municipios$Municipio <- gsub("[^[:alnum:]\\s]", "", municipios$Municipio)
# minimizar y quitar tildes
prestadores$depa_nombre <- tolower(prestadores$depa_nombre)
prestadores$muni_nombre <- tolower(prestadores$muni_nombre)
prestadores$depa_nombre <- iconv(prestadores$depa_nombre, to = "ASCII//TRANSLIT")
prestadores$muni_nombre <- iconv(prestadores$muni_nombre, to = "ASCII//TRANSLIT")
municipios$Departamento <- tolower(municipios$Departamento)
municipios$Municipio <- tolower(municipios$Municipio)
municipios$Departamento <- iconv(municipios$Departamento, to = "ASCII//TRANSLIT")
municipios$Municipio <- iconv(municipios$Municipio, to = "ASCII//TRANSLIT")
View(prestadores)
prestadores$depa_nombre <- gsub(" y providencia", "", prestadores$depa_nombre)
# direccion de trabajo
# pc 1 C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica
# pc 2 C:/Users/bcriv/Desktop/Prueba_tecnica/Prueba_tecnica_ADRES
setwd('C:/Users/bcriv/OneDrive/Escritorio/Prueba_tecnica')
# carga de datos
library(openxlsx)
library(readxl)
library(sqldf)
library(ggplot2)
### lectura de datos
municipios <- read.xlsx("Municipios.xlsx")
prestadores <- read.xlsx("Prestadores.xlsx")
# caracteres extraños
municipios$Departamento <- gsub("[^[:alnum:]\\s]", "", municipios$Departamento)
municipios$Municipio <- gsub("[^[:alnum:]\\s]", "", municipios$Municipio)
# minimizar y quitar tildes
prestadores$depa_nombre <- tolower(prestadores$depa_nombre)
prestadores$muni_nombre <- tolower(prestadores$muni_nombre)
prestadores$depa_nombre <- iconv(prestadores$depa_nombre, to = "ASCII//TRANSLIT")
prestadores$muni_nombre <- iconv(prestadores$muni_nombre, to = "ASCII//TRANSLIT")
municipios$Departamento <- tolower(municipios$Departamento)
municipios$Municipio <- tolower(municipios$Municipio)
municipios$Departamento <- iconv(municipios$Departamento, to = "ASCII//TRANSLIT")
municipios$Municipio <- iconv(municipios$Municipio, to = "ASCII//TRANSLIT")
# espacios en blanco
prestadores$depa_nombre  <- gsub("\\s+", "", prestadores$depa_nombre)
prestadores$muni_nombre  <- gsub("\\s+", "", prestadores$muni_nombre)
# eliminar "y providencia"
prestadores$depa_nombre <- gsub("yprovidencia", "", prestadores$depa_nombre)
# cargue de los datos a SQLite
conect <- dbConnect(SQLite(), dbname = "datos.db")
dbWriteTable(conect, name = 'prestadores', value = prestadores, row.names = FALSE, overwrite = TRUE)
dbWriteTable(conect, name = 'municipios', value = municipios, row.names = FALSE, overwrite = TRUE)
#estandarizar bogota
dbExecute(conect, "UPDATE municipios
SET Departamento = 'bogotad.c'
WHERE Departamento = 'bogotadc';")
dbExecute(conect, "UPDATE municipios
SET Municipio = 'bogotad.c'
WHERE Municipio = 'bogotadc';")
dbExecute(conect, "UPDATE prestadores
SET muni_nombre = 'bogotad.c'
WHERE muni_nombre = 'bogota';")
#corregimos errores de tipeo en los municipios y departamentos
a <- as.vector(unique(dbGetQuery(conect,"SELECT * FROM municipios")$Departamento))
b <- as.vector(unique(dbGetQuery(conect,"SELECT * FROM prestadores")$depa_nombre))
c(a[!(a %in% b)], b[!(b %in% a)])
dbExecute(conect,"UPDATE prestadores
SET depa_nombre = CASE
WHEN depa_nombre = 'barranquilla' THEN 'atlantico'
WHEN depa_nombre = 'buenaventura' THEN 'valledelcauca'
WHEN depa_nombre = 'cali' THEN 'valledelcauca'
WHEN depa_nombre = 'cartagena' THEN 'bolivar'
WHEN depa_nombre = 'santamarta' THEN 'magdalena'
ELSE depa_nombre
END;")
# preprando datos para analsiis temporal de las fechas de radicacion
dbExecute(conect, 'ALTER TABLE prestadores ADD COLUMN ano_radi INTEGER')
dbExecute(conect, 'ALTER TABLE prestadores ADD COLUMN mes_radi INTEGER')
dbExecute(conect, 'ALTER TABLE prestadores ADD COLUMN dia_radi INTEGER')
dbExecute(conect,"UPDATE prestadores
SET
ano_radi = CAST(SUBSTR(fecha_radicacion, 1, 4) AS INTEGER),
mes_radi = CAST(SUBSTR(fecha_radicacion, 5, 2) AS INTEGER),
dia_radi = CAST(SUBSTR(fecha_radicacion, 7, 2) AS INTEGER);")
# caratecrizacion de los datos
# proporcion de las clase de persona
dbGetQuery(conect,"SELECT  clase_persona,
COUNT(*) AS clase_persona,
COUNT(*) * 100.0 / (SELECT COUNT(*) FROM prestadores) AS porcentaje
FROM prestadores
GROUP BY clase_persona;")
# objeto social
dbGetQuery(conect,"SELECT  clpr_nombre,
COUNT(*) AS cantidad,
COUNT(*) * 100.0 / (SELECT COUNT(*) FROM prestadores) AS porcentaje
FROM prestadores
GROUP BY clpr_nombre;")
# dependencia de entidades privadas
dbGetQuery(conect,"SELECT  naju_nombre,
COUNT(*) AS cantidad,
COUNT(*) * 100.0 / (SELECT COUNT(*) FROM prestadores) AS porcentaje
FROM prestadores
GROUP BY naju_nombre;")
# departamentos que mas solicitaron prestadores
dbGetQuery(conect,"SELECT depa_nombre, COUNT(*) AS cantidad
FROM prestadores
GROUP BY depa_nombre
ORDER BY cantidad DESC
LIMIT 5;")
x1 <- dbGetQuery(conect,"SELECT depa_nombre, COUNT(*) AS cantidad
FROM prestadores
GROUP BY depa_nombre
ORDER BY cantidad DESC;")
# relacion entre la numero de prestadores y la poblacion del departamentos
dbGetQuery(conect,"SELECT p.depa_nombre, COUNT(*) AS cantidad, m.poblacion AS poblacion_total
FROM prestadores p
JOIN (
SELECT departamento, SUM(poblacion) AS poblacion
FROM municipios
GROUP BY departamento
) m ON m.Departamento = p.depa_nombre
GROUP BY p.depa_nombre
ORDER BY cantidad DESC
LIMIT 5;")
dbGetQuery(conect,"SELECT p.depa_nombre, COUNT(*) AS cantidad, m.poblacion AS poblacion_total
FROM prestadores p
JOIN (
SELECT departamento, SUM(poblacion) AS poblacion
FROM municipios
GROUP BY departamento
) m ON m.Departamento = p.depa_nombre
GROUP BY p.depa_nombre
ORDER BY cantidad
LIMIT 5;")
# numero de prestadores por region
dbGetQuery(conect,"SELECT m.Region , COUNT(*) AS num_prestadores
FROM prestadores p
JOIN (
SELECT Departamento, Region
FROM municipios
GROUP BY Departamento, Region
) m ON m.Departamento = p.depa_nombre
GROUP BY m.Region
ORDER BY num_prestadores DESC;")
# numeor de contratos por cada año registrado
#por dapartamento
resultados <- dbGetQuery(conect, "SELECT depa_nombre, ano_radi, mes_radi, COUNT(*) as conteo
FROM prestadores
GROUP BY depa_nombre, ano_radi, mes_radi")
ggplot(resultados, aes(x = as.Date(paste(ano_radi, mes_radi, "01", sep = "-")), y = conteo, color = depa_nombre)) +
geom_line() +
labs(x = "Fecha", y = "Cantidad de Datos", title = "Avance en el Tiempo por Departamento") +
theme_minimal()
# por region
dbExecute(conect,"ALTER TABLE prestadores ADD COLUMN region VARCHAR(255);")
dbExecute(conect,"UPDATE prestadores
SET region = (
SELECT municipios.region
FROM municipios
WHERE prestadores.depa_nombre = municipios.Departamento and municipios.Municipio = prestadores.muni_nombre
);")
datos_por_region <- dbGetQuery(conect, "SELECT region, ano_radi, mes_radi, COUNT(*) as conteo
FROM prestadores
GROUP BY region, ano_radi, mes_radi")
sum(datos_por_region$conteo)
ggplot(datos_por_region, aes(x = as.Date(paste(ano_radi, mes_radi, "01", sep = "-")), y = conteo, color = region)) +
geom_line() +
labs(x = "Fecha", y = "Cantidad de Datos", title = "Avance en el Tiempo por Departamento") +
theme_minimal()
#dbDisconnect(conect)
